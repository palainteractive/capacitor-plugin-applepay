import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
var ApplePay = /** @class */ (function (_super) {
    __extends(ApplePay, _super);
    function ApplePay() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ApplePay.prototype.canMakePayments = function () { return cordova(this, "canMakePayments", { "otherPromise": true }, arguments); };
    ApplePay.prototype.startListeningForShippingContactSelection = function () { return cordova(this, "startListeningForShippingContactSelection", { "observable": true, "clearFunction": "stopListeningForShippingContactSelection" }, arguments); };
    ApplePay.prototype.stopListeningForShippingContactSelection = function () { return cordova(this, "stopListeningForShippingContactSelection", { "otherPromise": true }, arguments); };
    ApplePay.prototype.updateItemsAndShippingMethods = function (list) { return cordova(this, "updateItemsAndShippingMethods", { "otherPromise": true }, arguments); };
    ApplePay.prototype.makePaymentRequest = function (order) { return cordova(this, "makePaymentRequest", { "otherPromise": true }, arguments); };
    ApplePay.prototype.completeLastTransaction = function (complete) { return cordova(this, "completeLastTransaction", { "otherPromise": true }, arguments); };
    ApplePay.pluginName = "ApplePay";
    ApplePay.plugin = "cordova-plugin-applepay";
    ApplePay.pluginRef = "ApplePay";
    ApplePay.repo = "https://github.com/samkelleher/cordova-plugin-applepay";
    ApplePay.platforms = ["iOS"];
ApplePay.ɵfac = /*@__PURE__*/ function () { var ɵApplePay_BaseFactory; return function ApplePay_Factory(t) { return (ɵApplePay_BaseFactory || (ɵApplePay_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(ApplePay)))(t || ApplePay); }; }();
ApplePay.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ApplePay, factory: function (t) { return ApplePay.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ApplePay, [{
        type: Injectable
    }], null, null); })();
    return ApplePay;
}(IonicNativePlugin));
export { ApplePay };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,